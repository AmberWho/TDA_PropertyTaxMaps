"""
persistDiagram.py

Author:   Amber, Anbo Wu
Date:   March 2021
Project:  Topological Data Analaysis of Property Tax Maps

Description:
  Offers functions to read arrays created by 
  persDiagram.py, produce or plot the according
  persistent image.

Functions:
  plotPi(dgm, x, y, path, dimension, method, _min, _max)
    plot persistent image and return the according array (100x100)
    precondition: if want to call calcExtreme() before to know
  dimension = {0, 1}, specify method of filtration.
  method = {'unscaled','scaled'}, specify method of plotting

  pi(dgm, x, y, dimension)
    only return the according array
  dimension = {0, 1}, specify method of filtration.

  _min, _max = calcExtreme(dgm):
    generate persistent image array for desired pictures,
    concatenate into one array and pass to this function to calculate
    the extrmities for plotting scaled persistent images
"""

import numpy as np
import PIL
import matplotlib.pyplot as plt
from persim import PersImage
import copy

def plotPi(dgm0, x, y, path, dimension = 0, method = 'unscaled', _min = 0, _max = 0):
  dgm = copy.deepcopy(dgm0)
  if dimension == 1:
    # For dimension 1, plot function only behave normally when shift all points to
    # positive axis.
    for n in range (len(dgm)):
      for k in range (len(dgm[n])):
          dgm[n][k] = 11 + dgm[n][k]
  pim = PersImage()
  PersImage.__init__(pim, spread=0.5, specs = {"maxBD": 13,
              "minBD": 0},pixels=[100,100], verbose=False)
  imgs = pim.transform(dgm)
  ax = plt.gca()
  fig, ax = plt.subplots(figsize=(6, 6))
  plt.xticks([])
  plt.yticks([])
  if dimension == 0:
    plt.title("PI for $H_0$\nwith 100x100 pixels, sample" + str('%02d' % x) + str('%02d' % y))
  elif dimension == 1:
    plt.title("PI for $H_1$\nwith 100x100 pixels, sample" + str('%02d' % x) + str('%02d' % y))
  if method == 'unscaled':
    ax.imshow(imgs, cmap=plt.get_cmap("plasma"))
    plt.savefig(path + str('%02d' % x) + str('%02d' % y) + "upi.png")
  elif method == 'scaled':
    ax.imshow(imgs, cmap=plt.get_cmap("CMRmap"), vmin = _min, vmax = _max) #rainbow
    plt.savefig(path + str('%02d' % x) + str('%02d' % y) + "pi.png")
  imgs_array = np.array([img.flatten() for img in imgs])
  return imgs_array

def pi(dgm, x, y, dimension = 0):
  if dimension == 1:
    for n in range (len(dgm)):
      for k in range (len(dgm[n])):
          dgm[n][k] = 11 + dgm[n][k]
  pim = PersImage()
  PersImage.__init__(pim, spread=0.5, specs = {"maxBD": 13,
              "minBD": 0},pixels=[100,100], verbose=False)
  imgs = pim.transform(dgm)
  imgs_array = np.array([img.flatten() for img in imgs])
  return imgs_array

def calcExtreme(dgm):
  _max = 0
  _min = 0
  dgmlist = []
  for i in range (len(dgm)):
      pim = PersImage()
      PersImage.__init__(pim, spread=0.5, specs = {"maxBD": 13,
                  "minBD": 0}, pixels=[100,100], verbose=False)
      imgs = pim.transform(dgm[i])
      imgs_array = np.array([img.flatten() for img in imgs])
      dgmlist.append(imgs_array)
      
      if np.amax(imgs) > _max:
          _max = np.amax(imgs)
      if np.amin(imgs) < _min:
          _min = np.amin(imgs)
  dgmlist = np.array(dgmlist)
  return _min, _max

# read information then ready for calling functions
#name = 'repdh1.npy' # change to the name of array generated by persistDiagram.py
#dgm = np.load(name, allow_pickle=True)
#dgm = dgm.tolist()

# path = "F:/Research/TDA/_0Cluster/H1PI/"
# pd = np.load('repdh1.npy', allow_pickle=True)
# for i in range(21):
#     for j in range (10):
#         index = i*10+j
#         plotPi(pd[index], i+1, j+1, path, dimension = 1)
#         plotPi(pd[index], i+1, j+1, path, dimension = 1, method = 'scaled', _min = 0, _max = 0.13)

        